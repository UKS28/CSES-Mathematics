#include <bits/stdc++.h>
using namespace std;
#define rep(k,z) for(int i=k;i<z;i++)
#define ll  long long int
const ll MOD=1e9+7;
vector<ll> fact(3e6+10,1);
vector<ll> inversefact (3e6+10,1);
 
ll modularBinaryExponentiation(ll base,ll exp)
{
    if(exp==0) return 1;
    ll res=modularBinaryExponentiation(base,exp/2);
    if(exp%2==1)
    return (((res*res)%MOD)*base)%MOD;
  
    return (res*res)%MOD;
    
}
 
void calc()
{
    fact[0]=fact[1]=1;
    inversefact[0]=inversefact[1]=1;
    for(ll i=2;i<fact.size();i++)
    {
      fact[i]=((fact[i-1])%MOD*i)%MOD;
      inversefact[i]= modularBinaryExponentiation(fact[i],MOD-2);
    }
}
 
int main()
{
   calc();
   ll n;
   cin>>n;
   if(n%2)
   {
    cout<<0<<endl;
    return 0;
   }
 
   ll k=n/2;
   //ans= (nCk) -(n C k-1)
   ll ans1= (((fact[n]*inversefact[k])%MOD)*inversefact[k])%MOD;
   ll ans2= (((fact[n]*inversefact[k-1])%MOD)*inversefact[k+1])%MOD;
   ll ans= (ans1-ans2+MOD)%MOD;
 
   cout<<ans<<endl;
 
 
}
